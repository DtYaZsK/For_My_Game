test.cpp:1:25: note: #pragma message: 14:53:31
 #pragma message(__TIME__)
                         ^
test.cpp:2:25: note: #pragma message: Aug  3 2014
 #pragma message(__DATE__)
                         ^
In file included from test.cpp:4:0:
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp: In function 'int main()':
test.cpp:17:34:   in constexpr expansion of 'func.plasma::lambda_t<RetType(ArgTypes ...), FirstInside>::operator()<int, {int}, plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >(3)'
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp:151:73:   in constexpr expansion of '((const plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >*)this)->plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >::first_.plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<IfInside>, True, False>::run<const plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >, {int}, {0u, 1u}>(this, (plasma::make_index_count<2u>(), plasma::index_count<2u>::type()), (*(const plasma::tuple<int>*)(& plasma::make_tuple<{int}>(args#0))))'
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp:76:62:   in constexpr expansion of '((const plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > >*)this)->plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > >::if_inside_.plasma::place_holder::types::if_t<Inside>::run<const plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >, {int}, {0u}>(ptr, (plasma::make_index_count<1u>(), plasma::index_count<1u>::type()), (* & t))'
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp:63:73: error: 'constexpr typename plasma::place_holder::types::return_type_getter<BaseFunc, plasma::place_holder::types::inside_t<Function, Insides>, plasma::tuple<Ts ...> >::type plasma::place_holder::types::inside_t<Function, Insides>::run(BaseFunc*, plasma::index_sequence<Is ...>, const plasma::tuple<Ts ...>&) const [with BaseFunc = const plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >; Ts = {int}; unsigned int ...Is = {0u}; Function = plasma::functions::is_zero_t; Insides = {plasma::place_holder::types::arg_place_holder_t<0u>}; typename plasma::place_holder::types::return_type_getter<BaseFunc, plasma::place_holder::types::inside_t<Function, Insides>, plasma::tuple<Ts ...> >::type = bool]' called in a constant expression
      return inside_.run(ptr, plasma::make_index_count<Inside::size>(), t);
                                                                         ^
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp:30:11: note: 'constexpr typename plasma::place_holder::types::return_type_getter<BaseFunc, plasma::place_holder::types::inside_t<Function, Insides>, plasma::tuple<Ts ...> >::type plasma::place_holder::types::inside_t<Function, Insides>::run(BaseFunc*, plasma::index_sequence<Is ...>, const plasma::tuple<Ts ...>&) const [with BaseFunc = const plasma::lambda_t<int(int), plasma::place_holder::types::inside_t<plasma::place_holder::types::if_t<plasma::place_holder::types::inside_t<plasma::functions::is_zero_t, plasma::place_holder::types::arg_place_holder_t<0u> > >, plasma::place_holder::types::constant_t<int>, plasma::place_holder::types::inside_t<plasma::place_holder::types::this_t, plasma::place_holder::types::inside_t<plasma::functions::prev_t, plasma::place_holder::types::arg_place_holder_t<0u> > > > >; Ts = {int}; unsigned int ...Is = {0u}; Function = plasma::functions::is_zero_t; Insides = {plasma::place_holder::types::arg_place_holder_t<0u>}; typename plasma::place_holder::types::return_type_getter<BaseFunc, plasma::place_holder::types::inside_t<Function, Insides>, plasma::tuple<Ts ...> >::type = bool]' is not usable as a constexpr function because:
      auto run(BaseFunc* ptr, index_sequence<Is...>, tuple<Ts...> const& t)const
           ^
c:/Users/DtYaZsK/Documents/GitHub/For_My_Game/plasma/lambda.hpp:33:114: error: call to non-constexpr function 'decltype ((a == 0)) plasma::functions::is_zero_t::operator()(T) const [with T = int; decltype ((a == 0)) = bool]'
      return func_((get<Is>(inside_).run(ptr, make_index_count<tuple_element_type<Is, this_tuple>::size>(), t))...);
                                                                                                                  ^
