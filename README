自分がゲーム作るようのライブラリ的な
DXライブラリ以外の部分で使えそうなのをテキトーに作ってみる
boostソフトウェアライセンスにするので使いたい方はご自由に

リファレンス
config.hpp
    多分constexprの有無を判別してくれる、多分
range_number.hpp
    代入した数を特定範囲にまるめてくれる(下なら下限に、上なら上限に)
    constexpr対応コンパイラなら多分constexprで使える
modulo_number.hpp
    代入した数を特定範囲の剰余類にする
    constexpr対応コンパイラなら(ry
index_sequence.hpp
    俗にいうindex_tupleイディオムとかいうやつ
tuple_to_func.hpp
    関数の引数にtupleの中身をそのまま渡す関数
    基本std::tupleにしか対応してないしあんまりテストもしてない
    config.hppをincludeする前にPLASMA_USE_SPROUTをdefineしたらsprout::tupleで使えるかもしれない
algorithm.hpp
    make_array(F func,index_sequence) index_sequenceのIsをfuncに渡した結果で新しいarrayを構成する
    ptr_delete_if(InputIterator beg,InputIterator end,Predicate pred)
	渡したスマートポインタオブジェクトを格納したコンテナのイテレータの内「中身が空でない」ものを「predに渡した結果がtrue」である場合releaseする
functions.hpp
    operatorを関数オブジェクトにラップしたやつとか
lambda.hpp
    constexprの文脈で使える無名関数
    ただしclangではバグの関係で使えない
static_assert.hpp
    PLASMA_PP_STATIC_ASSERT_0NUM(cond,str) 普通のstatic_assert
    PLASMA_PP_STATIC_ASSERT_1NUM(cond,str0,num,str1) 失敗したらstr0 + num + str1と出力される、numは0以上255以下が望ましい(0未満だとunder0に、256以上だとover255になる)

使える環境(厳密に試してないので間違ってるかもしれない)
Visual C++ 12.0以降
gcc clang constexprと可変長引数テンプレートが対応してるver(テキトー)
